<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.machineFile org.eventb.core.comment="Add a lower and upper bound of the correct answer.&#10;   Each improvement will narrow the bounds until, eventually, we have a single&#10;   number as the answer. " org.eventb.core.configuration="org.eventb.core.fwd" org.eventb.core.generated="false" org.eventb.texttools.text_lastmodified="1627323659442" org.eventb.texttools.text_representation="machine SquareRoot_R1_AddIncrementalImprovements&#10;/* Add a lower and upper bound of the correct answer.&#10;   Each improvement will narrow the bounds until, eventually, we have a single&#10;   number as the answer. */&#10; refines SquareRoot  sees SquareRootDefinition&#10;&#10;variables low // When improving we have a lower bound of the correct answer.&#10;          high // And an upper bound of the correct answer.&#10;          input input_valid result result_valid&#10;&#10;invariants&#10;  @inv1_1 low ∈ ℕ&#10;  @inv1_2 high ∈ ℕ&#10;  @inv1_3 low + 1 ≤ high // The span is 1 or more.&#10;  @inv1_4 low ∗ low ≤ input&#10;  @inv1_5 input &lt; high ∗ high&#10;  @inv1_6 low &lt; high&#10;  theorem @thm1_1 low + 1 ≠ high ⇒ low &lt; (low + high)÷2&#10;  theorem @thm1_2 (low + high)÷2 &lt; high&#10;  theorem @thm1_3 high − low &gt; 0&#10;  theorem @thm1_4 high − low ∈ ℕ&#10;&#10;variant&#10;high − low&#10;  /* The variant guarantees that the span must decrease in each step.&#10;     Eventually the span will be exactly one and low is the sought number . */&#10;&#10;events&#10;  event INITIALISATION extends INITIALISATION&#10;    then&#10;      @init1_1 low ≔ 0&#10;      @init1_2 high ≔ 1&#10;  end&#10;&#10;  event setInput&#10;  /* When num is set, we specify that a lower and upper bound is magically&#10;     selected in some way, that enables the improvement step to work.&#10;     We do not yet know, how this magical selection is performed.&#10;     Here we merely state that low and high are selected so that&#10;     the predicates become true. */&#10;  extends setInput&#10;    then&#10;      @act1_1 low :∣ low' ∈ ℕ ∧ low' ∗ low' ≤ v&#10;      @act1_2 high :∣ high' ∈ ℕ ∧ v &lt; high' ∗ high'&#10;  end&#10;&#10;  event getResult extends getResult&#10;  end&#10;&#10;  event SquareRoot&#10;  /* We detect the terminating case, when low+1=high,&#10;     then \(low=\sqrt{num}\) */&#10;  refines SquareRoot&#10;    where&#10;      @grd1_1 input_valid = TRUE&#10;      @grd1_2 result_valid = FALSE&#10;      @grd1_3 low + 1 = high // We have found the best value.&#10;      theorem @thm1_1 low ∗ low ≤ input&#10;      theorem @thm1_2 input &lt; high ∗ high&#10;    then&#10;      @act1_1 result ≔ low&#10;      @act1_2 result_valid ≔ TRUE&#10;  end&#10;&#10;  convergent event Improve&#10;  /* The improve event magically selects an l and h,&#10;     that are an improvement on the existing bounds.&#10;     We do not know how this is done, but we specify the&#10;     result here. */&#10;    any l h&#10;    where&#10;      @grd1_1 l ∈ ℕ&#10;      @grd1_2 h ∈ ℕ&#10;      @grd1_3 low + 1 ≠ high // We can still improve.&#10;      @grd1_4 low ≤ l // The new lower bound is higher.&#10;      @grd1_5 l ∗ l ≤ input // But still not above the input.&#10;      @grd1_6 h ≤ high // The new higher bound is lower.&#10;      @grd1_7 input &lt; h ∗ h // But still above the input.&#10;      @grd1_8 l + 1 ≤ h // The new span is 1 or more.&#10;      @grd1_9 h − l &lt; high − low // The new bound is an improvement.&#10;    then&#10;      @act1_1 low ≔ l&#10;      @act1_2 high ≔ h&#10;  end&#10;end&#10;" version="5">
    <org.eventb.core.refinesMachine name="_u2sK0L0rEeuQo7qM-CI_Qw" org.eventb.core.target="SquareRoot"/>
    <org.eventb.core.seesContext name="_Ixm4EL1VEeuQo7qM-CI_Qw" org.eventb.core.target="SquareRootDefinition"/>
    <org.eventb.core.variable name="_u2tY8r0rEeuQo7qM-CI_Qw" org.eventb.core.comment="When improving we have a lower bound of the correct answer." org.eventb.core.generated="false" org.eventb.core.identifier="low"/>
    <org.eventb.core.variable name="_u2tY870rEeuQo7qM-CI_Qw" org.eventb.core.comment="And an upper bound of the correct answer." org.eventb.core.generated="false" org.eventb.core.identifier="high"/>
    <org.eventb.core.variant name="_u2uABb0rEeuQo7qM-CI_Qw" org.eventb.core.comment="The variant guarantees that the span must decrease in each step.&#10;     Eventually the span will be exactly one and low is the sought number . " org.eventb.core.expression="high − low" org.eventb.core.generated="false" org.eventb.core.label="vrt"/>
    <org.eventb.core.event name="__hzdQL0rEeuQo7qM-CI_Qw" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.generated="false" org.eventb.core.label="INITIALISATION">
        <org.eventb.core.action name="_TwBDML1REeuQo7qM-CI_Qw" org.eventb.core.assignment="low ≔ 0" org.eventb.core.generated="false" org.eventb.core.label="init1_1"/>
        <org.eventb.core.action name="_TwBDMb1REeuQo7qM-CI_Qw" org.eventb.core.assignment="high ≔ 1" org.eventb.core.generated="false" org.eventb.core.label="init1_2"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_SiDO4L2LEeuQo7qM-CI_Qw" org.eventb.core.comment="When num is set, we specify that a lower and upper bound is magically&#10;     selected in some way, that enables the improvement step to work.&#10;     We do not yet know, how this magical selection is performed.&#10;     Here we merely state that low and high are selected so that&#10;     the predicates become true. " org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.generated="false" org.eventb.core.label="setInput">
        <org.eventb.core.refinesEvent name="_SiD18L2LEeuQo7qM-CI_Qw" org.eventb.core.target="setInput"/>
        <org.eventb.core.action name="_aeHvZb1QEeuQo7qM-CI_Qw" org.eventb.core.assignment="low :∣ low' ∈ ℕ ∧ low' ∗ low' ≤ v" org.eventb.core.generated="false" org.eventb.core.label="act1_1"/>
        <org.eventb.core.action name="_aeHvZr1QEeuQo7qM-CI_Qw" org.eventb.core.assignment="high :∣ high' ∈ ℕ ∧ v &lt; high' ∗ high'" org.eventb.core.generated="false" org.eventb.core.label="act1_2"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_SiD18b2LEeuQo7qM-CI_Qw" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.generated="false" org.eventb.core.label="getResult">
        <org.eventb.core.refinesEvent name="_SiD18r2LEeuQo7qM-CI_Qw" org.eventb.core.target="getResult"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_mJIvYL0sEeuQo7qM-CI_Qw" org.eventb.core.comment="We detect the terminating case, when low+1=high,&#10;     then \(low=\sqrt{num}\) " org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="SquareRoot">
        <org.eventb.core.refinesEvent name="_mJIvYb0sEeuQo7qM-CI_Qw" org.eventb.core.target="SquareRoot"/>
        <org.eventb.core.guard name="_aeHvYL1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="grd1_1" org.eventb.core.predicate="input_valid = TRUE"/>
        <org.eventb.core.guard name="_aeHvYb1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="grd1_2" org.eventb.core.predicate="result_valid = FALSE"/>
        <org.eventb.core.guard name="_69OfAr1QEeuQo7qM-CI_Qw" org.eventb.core.comment="We have found the best value." org.eventb.core.generated="false" org.eventb.core.label="grd1_3" org.eventb.core.predicate="low + 1 = high"/>
        <org.eventb.core.guard name="_aeHvY71QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="thm1_1" org.eventb.core.predicate="low ∗ low ≤ input" org.eventb.core.theorem="true"/>
        <org.eventb.core.guard name="_aeHvZL1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="thm1_2" org.eventb.core.predicate="input &lt; high ∗ high" org.eventb.core.theorem="true"/>
        <org.eventb.core.action name="_69OfBb1QEeuQo7qM-CI_Qw" org.eventb.core.assignment="result ≔ low" org.eventb.core.generated="false" org.eventb.core.label="act1_1"/>
        <org.eventb.core.action name="_69OfBr1QEeuQo7qM-CI_Qw" org.eventb.core.assignment="result_valid ≔ TRUE" org.eventb.core.generated="false" org.eventb.core.label="act1_2"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_z0NYQL0sEeuQo7qM-CI_Qw" org.eventb.core.comment="The improve event magically selects an l and h,&#10;     that are an improvement on the existing bounds.&#10;     We do not know how this is done, but we specify the&#10;     result here. " org.eventb.core.convergence="1" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="Improve">
        <org.eventb.core.parameter name="_z0NYQb0sEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.identifier="l"/>
        <org.eventb.core.parameter name="_z0NYQr0sEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.identifier="h"/>
        <org.eventb.core.guard name="_69OfAL1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="grd1_1" org.eventb.core.predicate="l ∈ ℕ"/>
        <org.eventb.core.guard name="_aeHvYr1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="grd1_2" org.eventb.core.predicate="h ∈ ℕ"/>
        <org.eventb.core.guard name="_Q2gfcL1REeuQo7qM-CI_Qw" org.eventb.core.comment="We can still improve." org.eventb.core.generated="false" org.eventb.core.label="grd1_3" org.eventb.core.predicate="low + 1 ≠ high"/>
        <org.eventb.core.guard name="_69OfA71QEeuQo7qM-CI_Qw" org.eventb.core.comment="The new lower bound is higher." org.eventb.core.generated="false" org.eventb.core.label="grd1_4" org.eventb.core.predicate="low ≤ l"/>
        <org.eventb.core.guard name="_69OfBL1QEeuQo7qM-CI_Qw" org.eventb.core.comment="But still not above the input." org.eventb.core.generated="false" org.eventb.core.label="grd1_5" org.eventb.core.predicate="l ∗ l ≤ input"/>
        <org.eventb.core.action name="_Q2gfcb1REeuQo7qM-CI_Qw" org.eventb.core.assignment="low ≔ l" org.eventb.core.generated="false" org.eventb.core.label="act1_1"/>
        <org.eventb.core.action name="_Q2gfcr1REeuQo7qM-CI_Qw" org.eventb.core.assignment="high ≔ h" org.eventb.core.generated="false" org.eventb.core.label="act1_2"/>
        <org.eventb.core.guard name="_NRyZgO47Eeu8APsN8XZDfA" org.eventb.core.comment="The new higher bound is lower." org.eventb.core.generated="false" org.eventb.core.label="grd1_6" org.eventb.core.predicate="h ≤ high"/>
        <org.eventb.core.guard name="_NRyZge47Eeu8APsN8XZDfA" org.eventb.core.comment="But still above the input." org.eventb.core.generated="false" org.eventb.core.label="grd1_7" org.eventb.core.predicate="input &lt; h ∗ h"/>
        <org.eventb.core.guard name="_NRyZgu47Eeu8APsN8XZDfA" org.eventb.core.comment="The new span is 1 or more." org.eventb.core.generated="false" org.eventb.core.label="grd1_8" org.eventb.core.predicate="l + 1 ≤ h"/>
        <org.eventb.core.guard name="_NRyZg-47Eeu8APsN8XZDfA" org.eventb.core.comment="The new bound is an improvement." org.eventb.core.generated="false" org.eventb.core.label="grd1_9" org.eventb.core.predicate="h − l &lt; high − low"/>
    </org.eventb.core.event>
    <org.eventb.core.variable name="_niFdsL2MEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.identifier="input"/>
    <org.eventb.core.variable name="_niFdsb2MEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.identifier="input_valid"/>
    <org.eventb.core.variable name="_-s32AL1PEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.identifier="result"/>
    <org.eventb.core.variable name="_-s32Ab1PEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.identifier="result_valid"/>
    <org.eventb.core.invariant name="_R7PIUL1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="inv1_1" org.eventb.core.predicate="low ∈ ℕ"/>
    <org.eventb.core.invariant name="_R7PIUb1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="inv1_2" org.eventb.core.predicate="high ∈ ℕ"/>
    <org.eventb.core.invariant name="_R7PIUr1QEeuQo7qM-CI_Qw" org.eventb.core.comment="The span is 1 or more." org.eventb.core.generated="false" org.eventb.core.label="inv1_3" org.eventb.core.predicate="low + 1 ≤ high"/>
    <org.eventb.core.invariant name="_R7PIU71QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="inv1_4" org.eventb.core.predicate="low ∗ low ≤ input"/>
    <org.eventb.core.invariant name="_R7PIVL1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="inv1_5" org.eventb.core.predicate="input &lt; high ∗ high"/>
    <org.eventb.core.invariant name="_mwfhUL2PEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="inv1_6" org.eventb.core.predicate="low &lt; high"/>
    <org.eventb.core.invariant name="_R7PIVb1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="thm1_1" org.eventb.core.predicate="low + 1 ≠ high ⇒ low &lt; (low + high)÷2" org.eventb.core.theorem="true"/>
    <org.eventb.core.invariant name="_R7PIVr1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="thm1_2" org.eventb.core.predicate="(low + high)÷2 &lt; high" org.eventb.core.theorem="true"/>
    <org.eventb.core.invariant name="_R7PIV71QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="thm1_3" org.eventb.core.predicate="high − low &gt; 0" org.eventb.core.theorem="true"/>
    <org.eventb.core.invariant name="_R7PIWL1QEeuQo7qM-CI_Qw" org.eventb.core.generated="false" org.eventb.core.label="thm1_4" org.eventb.core.predicate="high − low ∈ ℕ" org.eventb.core.theorem="true"/>
</org.eventb.core.machineFile>
